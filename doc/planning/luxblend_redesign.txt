LuxBlend rewrite

Code Design:
- properties/UI: both easy to script and easy to hook in "special draw functions" for complex UI behaviour
- node templates (with same requirements as above)
- no duplicate code for still/animation/viewport
- caching for still/animation/viewport
- make viewport render robust (no running in background unwanted)
- one luxcore session during animation render, with updates (to avoid kernel compilation times)
- good workarounds for the Blender ID issue (datablock renaming, append/link - maybe wrap with operators)
- if possible, have properties, UI and export code in one place for each material/tex/...
- idea for image tex nodes: create blender image tex for each, use its id block

Features:
- find out how to use the same viewport color stuff as Cycles (and/or, if that's not possible, code something that works... in all possible editors etc.)
- Texture tab behaviour similar to Cycles (Brush textures, particle textures, modifier textures)
- help buttons in every Lux panel header (expand to an info text explaining the feature)
- idea: for lightgroups and every other "fake ID" implemented as strings, 
  have an update method that searches the whole .blend for "fake IDs" that point to the old name and updates them to the new name. Would require a way to identify these "fake IDs".

Low priority
- Useful presets for materials (e.g. "PBR", "Glossy with Specmap")
- Mesh export: use free_mpoly option in calc_tessface operation? https://www.blender.org/api/blender_python_api_2_78_release/bpy.types.Mesh.html?highlight=calc_normals_split#bpy.types.Mesh.calc_tessface

Done/Obsolete
- fast film updates (Cython? extend LuxCoreForBlender?)
- reduced filmsize during movement and/or support for RT modes
--> Dade implemented support to directly write in glBuffer
